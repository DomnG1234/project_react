{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\project_react\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './style/App.css';\nimport TaskForm from \"./app_components/TaskForm\";\nimport Task from \"./app_components/Task\";\nimport { useEffect, useState } from \"react\";\nimport { AllTasksFilter, CompletedTasksFilter, IncompleteTasksFilter } from './app_components/FilterStrategy';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState(\"toate\"); // Starea pentru tipul de filtrare\n  // Hook-ul useEffect pentru a salva sarcinile în localStorage atunci când se modifică starea tasks\n\n  // Funcție pentru filtrarea sarcinilor\n  const filterTasks = tasks => {\n    let filterStrategy;\n    if (filter === \"finalizate\") {\n      filterStrategy = new CompletedTasksFilter();\n    } else if (filter === \"nefinalizate\") {\n      filterStrategy = new IncompleteTasksFilter();\n    } else {\n      filterStrategy = new AllTasksFilter();\n    }\n    return filterStrategy.filter(tasks);\n  };\n  useEffect(() => {\n    if (tasks.length === 0) return;\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n  useEffect(() => {\n    const savedTasks = JSON.parse(localStorage.getItem('tasks'));\n    setTasks(savedTasks || []);\n  }, []);\n\n  /* setTasks pentru a actualiza starea anterioară a obiectului tasks.*/\n  const addTask = name => {\n    setTasks(prev => {\n      return [...prev, {\n        name: name,\n        done: false\n      }];\n    });\n  };\n  const removeTask = indexToRemove => {\n    setTasks(prev => {\n      return prev.filter((taskObject, index) => index !== indexToRemove);\n    });\n  };\n  const updateTaskDone = (taskIndex, newDone) => {\n    setTasks(prev => {\n      const newTasks = [...prev];\n      newTasks[taskIndex].done = newDone;\n      return newTasks;\n    });\n  };\n  const renameTask = (index, newName) => {\n    setTasks(prev => {\n      const newTasks = [...prev];\n      newTasks[index].name = newName;\n      return newTasks;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"LIST\\u0102 DE ACTIVIT\\u0102\\u021AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TaskForm, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Task, {\n      ...task,\n      onRename: newName => renameTask(index, newName),\n      onTrash: () => removeTask(index),\n      onToggle: done => updateTaskDone(index, done)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"mbJFjLa4dcruYBoUExoQddeCb1s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["TaskForm","Task","useEffect","useState","AllTasksFilter","CompletedTasksFilter","IncompleteTasksFilter","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","filter","setFilter","filterTasks","filterStrategy","length","localStorage","setItem","JSON","stringify","savedTasks","parse","getItem","addTask","name","prev","done","removeTask","indexToRemove","taskObject","index","updateTaskDone","taskIndex","newDone","newTasks","renameTask","newName","children","fileName","_jsxFileName","lineNumber","columnNumber","onAdd","map","task","onRename","onTrash","onToggle","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/project_react/src/App.js"],"sourcesContent":["import './style/App.css';\nimport TaskForm from \"./app_components/TaskForm\";\nimport Task from \"./app_components/Task\";\nimport { useEffect, useState } from \"react\";\nimport { AllTasksFilter, CompletedTasksFilter, IncompleteTasksFilter } from './app_components/FilterStrategy';\n\nconst App = () => {\n    const [tasks, setTasks] = useState([]);\n    const [filter, setFilter] = useState(\"toate\"); // Starea pentru tipul de filtrare\n    // Hook-ul useEffect pentru a salva sarcinile în localStorage atunci când se modifică starea tasks\n\n\n\n    // Funcție pentru filtrarea sarcinilor\n    const filterTasks = (tasks) => {\n        let filterStrategy;\n\n        if (filter === \"finalizate\") {\n            filterStrategy = new CompletedTasksFilter();\n        } else if (filter === \"nefinalizate\") {\n            filterStrategy = new IncompleteTasksFilter();\n        } else {\n            filterStrategy = new AllTasksFilter();\n        }\n\n        return filterStrategy.filter(tasks);\n    };\n    useEffect(() => {\n        if (tasks.length === 0) return;\n        localStorage.setItem('tasks', JSON.stringify(tasks));\n    }, [tasks]);\n\n\n    useEffect(() => {\n        const savedTasks = JSON.parse(localStorage.getItem('tasks'));\n        setTasks(savedTasks || []);\n    }, []);\n\n\n   /* setTasks pentru a actualiza starea anterioară a obiectului tasks.*/\n    const addTask = (name) => {\n        setTasks(prev => {\n            return [...prev, { name: name, done: false }];\n        });\n    }\n\n    const removeTask = (indexToRemove) => {\n        setTasks(prev => {\n            return prev.filter((taskObject, index) => index !== indexToRemove);\n        });\n    }\n\n    const updateTaskDone = (taskIndex, newDone) => {\n        setTasks(prev => {\n            const newTasks = [...prev];\n            newTasks[taskIndex].done = newDone;\n            return newTasks;\n        });\n    }\n\n    const renameTask = (index, newName) => {\n        setTasks(prev => {\n            const newTasks = [...prev];\n            newTasks[index].name = newName;\n            return newTasks;\n        })\n    }\n\n    return (\n        <main>\n\n            <h1>LISTĂ DE ACTIVITĂȚI</h1>\n            <TaskForm onAdd={addTask} />\n            {tasks.map((task, index) => (\n                <Task\n                    {...task}\n                    onRename={newName => renameTask(index, newName)}\n                    onTrash={() => removeTask(index)}\n                    onToggle={done => updateTaskDone(index, done)}\n                />\n\n            ))}\n\n\n        </main>\n    );\n}\nexport default App;\n"],"mappings":";;AAAA,OAAO,iBAAiB;AACxB,OAAOA,QAAQ,MAAM,2BAA2B;AAChD,OAAOC,IAAI,MAAM,uBAAuB;AACxC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,cAAc,EAAEC,oBAAoB,EAAEC,qBAAqB,QAAQ,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9G,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;EAC/C;;EAIA;EACA,MAAMY,WAAW,GAAIJ,KAAK,IAAK;IAC3B,IAAIK,cAAc;IAElB,IAAIH,MAAM,KAAK,YAAY,EAAE;MACzBG,cAAc,GAAG,IAAIX,oBAAoB,CAAC,CAAC;IAC/C,CAAC,MAAM,IAAIQ,MAAM,KAAK,cAAc,EAAE;MAClCG,cAAc,GAAG,IAAIV,qBAAqB,CAAC,CAAC;IAChD,CAAC,MAAM;MACHU,cAAc,GAAG,IAAIZ,cAAc,CAAC,CAAC;IACzC;IAEA,OAAOY,cAAc,CAACH,MAAM,CAACF,KAAK,CAAC;EACvC,CAAC;EACDT,SAAS,CAAC,MAAM;IACZ,IAAIS,KAAK,CAACM,MAAM,KAAK,CAAC,EAAE;IACxBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACV,KAAK,CAAC,CAAC;EACxD,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAGXT,SAAS,CAAC,MAAM;IACZ,MAAMoB,UAAU,GAAGF,IAAI,CAACG,KAAK,CAACL,YAAY,CAACM,OAAO,CAAC,OAAO,CAAC,CAAC;IAC5DZ,QAAQ,CAACU,UAAU,IAAI,EAAE,CAAC;EAC9B,CAAC,EAAE,EAAE,CAAC;;EAGP;EACC,MAAMG,OAAO,GAAIC,IAAI,IAAK;IACtBd,QAAQ,CAACe,IAAI,IAAI;MACb,OAAO,CAAC,GAAGA,IAAI,EAAE;QAAED,IAAI,EAAEA,IAAI;QAAEE,IAAI,EAAE;MAAM,CAAC,CAAC;IACjD,CAAC,CAAC;EACN,CAAC;EAED,MAAMC,UAAU,GAAIC,aAAa,IAAK;IAClClB,QAAQ,CAACe,IAAI,IAAI;MACb,OAAOA,IAAI,CAACd,MAAM,CAAC,CAACkB,UAAU,EAAEC,KAAK,KAAKA,KAAK,KAAKF,aAAa,CAAC;IACtE,CAAC,CAAC;EACN,CAAC;EAED,MAAMG,cAAc,GAAGA,CAACC,SAAS,EAAEC,OAAO,KAAK;IAC3CvB,QAAQ,CAACe,IAAI,IAAI;MACb,MAAMS,QAAQ,GAAG,CAAC,GAAGT,IAAI,CAAC;MAC1BS,QAAQ,CAACF,SAAS,CAAC,CAACN,IAAI,GAAGO,OAAO;MAClC,OAAOC,QAAQ;IACnB,CAAC,CAAC;EACN,CAAC;EAED,MAAMC,UAAU,GAAGA,CAACL,KAAK,EAAEM,OAAO,KAAK;IACnC1B,QAAQ,CAACe,IAAI,IAAI;MACb,MAAMS,QAAQ,GAAG,CAAC,GAAGT,IAAI,CAAC;MAC1BS,QAAQ,CAACJ,KAAK,CAAC,CAACN,IAAI,GAAGY,OAAO;MAC9B,OAAOF,QAAQ;IACnB,CAAC,CAAC;EACN,CAAC;EAED,oBACI5B,OAAA;IAAA+B,QAAA,gBAEI/B,OAAA;MAAA+B,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5BnC,OAAA,CAACR,QAAQ;MAAC4C,KAAK,EAAEnB;IAAQ;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC3BhC,KAAK,CAACkC,GAAG,CAAC,CAACC,IAAI,EAAEd,KAAK,kBACnBxB,OAAA,CAACP,IAAI;MAAA,GACG6C,IAAI;MACRC,QAAQ,EAAET,OAAO,IAAID,UAAU,CAACL,KAAK,EAAEM,OAAO,CAAE;MAChDU,OAAO,EAAEA,CAAA,KAAMnB,UAAU,CAACG,KAAK,CAAE;MACjCiB,QAAQ,EAAErB,IAAI,IAAIK,cAAc,CAACD,KAAK,EAAEJ,IAAI;IAAE;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAEJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGA,CAAC;AAEf,CAAC;AAAAjC,EAAA,CAhFKD,GAAG;AAAAyC,EAAA,GAAHzC,GAAG;AAiFT,eAAeA,GAAG;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}